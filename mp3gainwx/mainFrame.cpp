// -*- C++ -*- generated by wxGlade 0.3.4 on Thu Sep 02 00:14:45 2004

#include "mainFrame.h"

#ifdef __WXMSW__

#define big_add_files_img		wxBITMAP(big_add_files_bmp)
#define big_add_folder_img		wxBITMAP(big_add_folder_bmp)
#define big_scan_radio_img		wxBITMAP(big_scan_radio_bmp)
#define big_scan_album_img		wxBITMAP(big_scan_album_bmp)
#define big_adjust_radio_img	wxBITMAP(big_adjust_radio_bmp)
#define big_adjust_album_img	wxBITMAP(big_adjust_album_bmp)
#define big_adjust_constant_img	wxBITMAP(big_adjust_constant_bmp)
#define big_remove_files_img	wxBITMAP(big_remove_files_bmp)
#define big_remove_all_img		wxBITMAP(big_remove_all_bmp)
#define big_stop_img			wxBITMAP(big_stop_bmp)

#else

#include "res/big_add_files.xpm"
#include "res/big_add_folder.xpm"
#include "res/big_scan_radio.xpm"
#include "res/big_scan_album.xpm"
#include "res/big_adjust_radio.xpm"
#include "res/big_adjust_album.xpm"
#include "res/big_adjust_constant.xpm"
#include "res/big_remove_files.xpm"
#include "res/big_remove_all.xpm"
#include "res/big_stop.xpm"
#include "res/mp3gain.xpm"

#define big_add_files_img		big_add_files_xpm
#define big_add_folder_img		big_add_folder_xpm
#define big_scan_radio_img		big_scan_radio_xpm
#define big_scan_album_img		big_scan_album_xpm
#define big_adjust_radio_img	big_adjust_radio_xpm
#define big_adjust_album_img	big_adjust_album_xpm
#define big_adjust_constant_img	big_adjust_constant_xpm
#define big_remove_files_img	big_remove_files_xpm
#define big_remove_all_img		big_remove_all_xpm
#define big_stop_img			big_stop_xpm

#endif

BEGIN_EVENT_TABLE(mainFrame, wxFrame)
	EVT_MENU(ID_MENU_QUIT, mainFrame::OnQuit)
	EVT_MENU(ID_MENU_ABOUT, mainFrame::OnAbout)
	EVT_MENU_RANGE(ID_MENU_MODE_TRACK, ID_MENU_MODE_MANUAL, mainFrame::OnModeChange)
	EVT_MENU(ID_MENU_ADD_FILES, mainFrame::OnAddFiles)
	EVT_MENU(ID_MENU_ADD_FOLDER, mainFrame::OnAddFolder)
	EVT_TOOL(ID_TOOL_ADD_FILES, mainFrame::OnAddFiles)
	EVT_TOOL(ID_TOOL_ADD_FOLDER, mainFrame::OnAddFolder)
	EVT_SLIDER(ID_SLIDER_VOLUME, mainFrame::OnVolumeChange)
END_EVENT_TABLE()

mainFrame::mainFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
	// begin wxGlade: mainFrame::mainFrame
    panel_2 = new wxPanel(this, -1);
    panel_1 = new wxPanel(this, -1);
    mainMenu = new wxMenuBar();
    SetMenuBar(mainMenu);
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(ID_MENU_ADD_FILES, wxT("Add Files"), wxT("Add mp3 files to list"), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(ID_MENU_ADD_FOLDER, wxT("Add Folder"), wxT("Add all mp3 files in a folder"), wxITEM_NORMAL);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(ID_MENU_CLEAR_FILES, wxT("Clear files"), wxT("Remove selected files from list"), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(ID_MENU_CLEAR_ALL, wxT("Clear all files"), wxT("Remove all files from list"), wxITEM_NORMAL);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(ID_MENU_QUIT, wxT("E&xit"), wxT("Quit this program"), wxITEM_NORMAL);
    mainMenu->Append(wxglade_tmp_menu_1, wxT("&File"));
    wxMenu* wxglade_tmp_menu_2 = new wxMenu();
    wxglade_tmp_menu_2->Append(ID_MENU_MODE_TRACK, wxT("&Track"), wxT("\"Track\" analysis and gain"), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_MENU_MODE_ALBUM, wxT("&Album"), wxT("\"Album\" analysis and gain"), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_MENU_MODE_MANUAL, wxT("&Manual"), wxT("Manual gain change"), wxITEM_RADIO);
    mainMenu->Append(wxglade_tmp_menu_2, wxT("&Mode"));
    wxMenu* wxglade_tmp_menu_3 = new wxMenu();
    wxglade_tmp_menu_3->Append(ID_MENU_TRACK_ANALYSIS, wxT("Track Analysis"), wxT("Calculate ReplayGain for each mp3 file"), wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(ID_MENU_ALBUM_ANALYSIS, wxT("Album Analysis"), wxT("Calculate ReplayGain for each folder"), wxITEM_NORMAL);
    mainMenu->Append(wxglade_tmp_menu_3, wxT("Analysis"));
    wxMenu* wxglade_tmp_menu_4 = new wxMenu();
    wxglade_tmp_menu_4->Append(ID_MENU_TRACK_GAIN, wxT("Track Gain"), wxT("Apply suggested Track gain to each file"), wxITEM_NORMAL);
    wxglade_tmp_menu_4->Append(ID_MENU_ALBUM_GAIN, wxT("Album Gain"), wxT("Apply suggested Album gain to each folder"), wxITEM_NORMAL);
    wxglade_tmp_menu_4->Append(ID_MENU_MANUAL_GAIN, wxT("Manual Gain"), wxT("Apply user-selected gain change to each file"), wxITEM_NORMAL);
    mainMenu->Append(wxglade_tmp_menu_4, wxT("Gain"));
    mainStatusbar = CreateStatusBar(1, 0);
    mainToolbar = new wxToolBar(this, -1, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL|wxTB_FLAT|wxTB_TEXT);
    SetToolBar(mainToolbar);
    mainToolbar->SetToolBitmapSize(wxSize(48, 48));
    mainToolbar->AddTool(ID_TOOL_ADD_FILES, wxT("Add Files"), wxBitmap(big_add_files_img), wxNullBitmap, wxITEM_NORMAL, wxT("Add mp3 files to list"), wxT("Add mp3 files to list"));
    mainToolbar->AddTool(ID_TOOL_ADD_FOLDER, wxT("Add Folder"), wxBitmap(big_add_folder_img), wxNullBitmap, wxITEM_NORMAL, wxT("Add all mp3 files in a folder"), wxT("Add all mp3 files in a folder"));
    mainToolbar->AddSeparator();
    mainToolbar->AddTool(ID_TOOL_ANALYZE, wxT("Track Analysis"), wxBitmap(big_scan_radio_img), wxNullBitmap, wxITEM_NORMAL, wxT("Do ReplayGain analysis on files"), wxT("Do ReplayGain analysis on files"));
    mainToolbar->AddTool(ID_TOOL_GAIN, wxT("Track Gain"), wxBitmap(big_adjust_radio_img), wxNullBitmap, wxITEM_NORMAL, wxT("Change volume of files"), wxT("Change volume of files"));
    mainToolbar->AddSeparator();
    mainToolbar->AddTool(ID_TOOL_CLEAR_FILES, wxT("Clear Files"), wxBitmap(big_remove_files_img), wxNullBitmap, wxITEM_NORMAL, wxT("Remove selected files from list"), wxT("Remove selected files from list"));
    mainToolbar->AddTool(ID_TOOL_CLEAR_ALL, wxT("Clear All"), wxBitmap(big_remove_all_img), wxNullBitmap, wxITEM_NORMAL, wxT("Remove all files from list"), wxT("Remove all files from list"));
    mainToolbar->AddSeparator();
    mainToolbar->AddTool(ID_TOOL_CANCEL, wxT("Cancel"), wxBitmap(big_stop_img), wxNullBitmap, wxITEM_NORMAL, wxT("Cancel current processing"), wxT("Cancel current processing"));
    mainToolbar->Realize();
    static_line_1 = new wxStaticLine(this, -1);
    targetLabel = new wxStaticText(panel_1, -1, wxT("Target \"Normal\" Volume:"));
    volumeSlider = new wxSlider(panel_1, ID_SLIDER_VOLUME, 890, 800, 1050);
    volumeLabel = new wxStaticText(panel_1, ID_LABEL_VOLUME, wxT("100.0 dB"));
    mainList = new wxListCtrl(this, -1, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    fileProgressLabel = new wxStaticText(panel_2, -1, wxT("File Progress:"));
    fileProgress = new wxGauge(panel_2, -1, 100);
    totalProgressLabel = new wxStaticText(panel_2, -1, wxT("Total Progress:"));
    totalProgress = new wxGauge(panel_2, -1, 100);

    set_properties();
    do_layout();
    // end wxGlade
}


void mainFrame::set_properties()
{
    // begin wxGlade: mainFrame::set_properties
    SetTitle(wxT("MP3Gain"));
#ifdef __WXMSW__
    SetIcon(wxICON(mondrian));
#else
    wxIcon _icon;
    _icon.CopyFromBitmap(wxBitmap(mp3gain_xpm));
    SetIcon(_icon);
#endif
    SetSize(wxSize(629, 476));
    int mainStatusbar_widths[] = { -1 };
    mainStatusbar->SetStatusWidths(1, mainStatusbar_widths);
    const wxString mainStatusbar_fields[] = {
        wxT("Ready")
    };
    for(int i = 0; i < mainStatusbar->GetFieldsCount(); ++i) {
        mainStatusbar->SetStatusText(mainStatusbar_fields[i], i);
    }
    // end wxGlade
	mainList->InsertColumn(0,wxT("Path/File"));
	mainList->InsertColumn(1,wxT("Volume"));
	mainList->InsertColumn(2,wxT("clipping"));
	mainList->InsertColumn(3,wxT("Track Gain"));
	mainList->InsertColumn(4,wxT("clip(Track)"));
	mainList->InsertColumn(5,wxT("Album Volume"));
	mainList->InsertColumn(6,wxT("Album Gain"));
	mainList->InsertColumn(7,wxT("clip(Album)"));



	mainList->InsertItem(0,wxT("TestWhoa"));
	mainList->SetItem(0,1,wxT("91.3"));
	mainList->SetItem(0,2,wxT("Y"));
	mainList->SetItem(0,3,wxT("-1.5"));



	EnableStuff(TRUE);

}


void mainFrame::do_layout()
{
    // begin wxGlade: mainFrame::do_layout
    wxBoxSizer* mainSplit = new wxBoxSizer(wxVERTICAL);
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(2, 2, 0, 0);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    mainSplit->Add(static_line_1, 0, wxEXPAND, 0);
    sizer_2->Add(targetLabel, 0, 0, 0);
    sizer_2->Add(volumeSlider, 1, wxEXPAND, 0);
    sizer_2->Add(volumeLabel, 0, 0, 0);
    panel_1->SetAutoLayout(true);
    panel_1->SetSizer(sizer_2);
    sizer_2->Fit(panel_1);
    sizer_2->SetSizeHints(panel_1);
    mainSplit->Add(panel_1, 0, wxEXPAND, 0);
    mainSplit->Add(mainList, 1, wxEXPAND, 0);
    grid_sizer_1->Add(fileProgressLabel, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_1->Add(fileProgress, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_1->Add(totalProgressLabel, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_1->Add(totalProgress, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    panel_2->SetAutoLayout(true);
    panel_2->SetSizer(grid_sizer_1);
    grid_sizer_1->Fit(panel_2);
    grid_sizer_1->SetSizeHints(panel_2);
    grid_sizer_1->AddGrowableCol(1);
    mainSplit->Add(panel_2, 0, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(mainSplit);
    Layout();
    // end wxGlade
	ChangeVolumeLabel();
}

void mainFrame::OnQuit(wxCommandEvent& WXUNUSED(event)) {
	Close(TRUE);
};

void mainFrame::OnAbout(wxCommandEvent& WXUNUSED(event)) {
	wxMessageBox(wxT("This is a wxWidgets Hello World sample"),
				 wxT("About Hello World"), wxOK | wxICON_INFORMATION, this);
};

void mainFrame::OnModeChange(wxCommandEvent& event) {
	
	//Will return FALSE if we're currently in "Manual" mode, but that's okay
	mainToolbar->DeleteTool(ID_TOOL_ANALYZE);

	mainToolbar->DeleteTool(ID_TOOL_GAIN);
	
	switch(event.GetId()) {
		case ID_MENU_MODE_TRACK:
			mainToolbar->InsertTool(3,ID_TOOL_GAIN, wxT("Track Gain"), wxBitmap(big_adjust_radio_img), wxNullBitmap, wxITEM_NORMAL, wxT("Change volume of files"), wxT("Change volume of files"));
			mainToolbar->InsertTool(3,ID_TOOL_ANALYZE, wxT("Track Analysis"), wxBitmap(big_scan_radio_img), wxNullBitmap, wxITEM_NORMAL, wxT("Do ReplayGain analysis on files"), wxT("Do ReplayGain analysis on files"));
			break;
		case ID_MENU_MODE_ALBUM:
			mainToolbar->InsertTool(3,ID_TOOL_GAIN, wxT("Album Gain"), wxBitmap(big_adjust_album_img), wxNullBitmap, wxITEM_NORMAL, wxT("Change volume of files"), wxT("Change volume of files"));
			mainToolbar->InsertTool(3,ID_TOOL_ANALYZE, wxT("Album Analysis"), wxBitmap(big_scan_album_img), wxNullBitmap, wxITEM_NORMAL, wxT("Do ReplayGain analysis on files"), wxT("Do ReplayGain analysis on files"));
			break;
		case ID_MENU_MODE_MANUAL:
			mainToolbar->InsertTool(3,ID_TOOL_GAIN, wxT("Manual Gain"), wxBitmap(big_adjust_constant_img), wxNullBitmap, wxITEM_NORMAL, wxT("Change volume of files"), wxT("Change volume of files"));
			break;
	}

    mainToolbar->Realize();

	EnableStuff(TRUE);
};

void mainFrame::ChangeVolumeLabel() {
	targetVolume = (float)(volumeSlider->GetValue()) / 10.0;
	volumeLabel->SetLabel(wxString::Format(wxT("%0.1f dB"), targetVolume));
}

void mainFrame::OnVolumeChange(wxScrollEvent& WXUNUSED(event)) {
	ChangeVolumeLabel();
}

void mainFrame::OnAddFiles(wxCommandEvent& WXUNUSED(event)) {
    wxFileDialog dialog(this, wxT("Choose mp3 files"),
                        wxT(""), wxT(""), wxT("MP3 files (*.mp3)|*.mp3"),
                        wxOPEN|wxMULTIPLE|wxCHANGE_DIR);

    if (dialog.ShowModal() == wxID_CANCEL) {
		return;
	}
    wxArrayString paths, filenames;

    dialog.GetPaths(paths);
    dialog.GetFilenames(filenames);

    wxString msg, s;
    size_t count = paths.GetCount();
    for ( size_t n = 0; n < count; n++ )
    {
        s.Printf(wxT("File %d: %s (%s)\n"),
                 n, paths[n].c_str(), filenames[n].c_str());

        msg += s;
    }

    wxMessageDialog dialog2(this, msg, wxT("Selected files"));
    dialog2.ShowModal();
}

void mainFrame::OnAddFolder(wxCommandEvent& WXUNUSED(event)) {
    // pass some initial dir to wxDirDialog
    wxString dirHome;
    wxGetHomeDir(&dirHome);

    wxDirDialog dialog(this, wxT("Testing directory picker"), dirHome);

    if (dialog.ShowModal() == wxID_OK)
    {
        wxMessageBox(wxString::Format(wxT("Selected path: %s"), dialog.GetPath().c_str()));
    }
}

void mainFrame::EnableStuff(const bool enable) {
	mainToolbar->EnableTool(ID_TOOL_ADD_FILES, enable);
	mainToolbar->EnableTool(ID_TOOL_ADD_FOLDER, enable);
	mainMenu->Enable(ID_MENU_ADD_FILES, enable);
	mainMenu->Enable(ID_MENU_ADD_FOLDER, enable);
	mainMenu->Enable(ID_MENU_MODE_TRACK, enable);
	mainMenu->Enable(ID_MENU_MODE_ALBUM, enable);
	mainMenu->Enable(ID_MENU_MODE_MANUAL, enable);

	if (mainList->GetItemCount() == 0) {
		mainToolbar->EnableTool(ID_TOOL_ANALYZE, FALSE);
		mainToolbar->EnableTool(ID_TOOL_GAIN, FALSE);
		mainToolbar->EnableTool(ID_TOOL_CLEAR_FILES, FALSE);
		mainToolbar->EnableTool(ID_TOOL_CLEAR_ALL, FALSE);
		mainToolbar->EnableTool(ID_TOOL_CANCEL, FALSE);
		mainMenu->Enable(ID_MENU_TRACK_ANALYSIS, FALSE);
		mainMenu->Enable(ID_MENU_ALBUM_ANALYSIS, FALSE);
		mainMenu->Enable(ID_MENU_TRACK_GAIN, FALSE);
		mainMenu->Enable(ID_MENU_ALBUM_GAIN, FALSE);
		mainMenu->Enable(ID_MENU_MANUAL_GAIN, FALSE);
		mainMenu->Enable(ID_MENU_CLEAR_FILES, FALSE);
		mainMenu->Enable(ID_MENU_CLEAR_ALL, FALSE);
	} else {
		mainToolbar->EnableTool(ID_TOOL_ANALYZE, enable);
		mainToolbar->EnableTool(ID_TOOL_GAIN, enable);
		mainToolbar->EnableTool(ID_TOOL_CLEAR_FILES, enable);
		mainToolbar->EnableTool(ID_TOOL_CLEAR_ALL, enable);
		mainToolbar->EnableTool(ID_TOOL_CANCEL, !enable);
		mainMenu->Enable(ID_MENU_TRACK_ANALYSIS, enable);
		mainMenu->Enable(ID_MENU_ALBUM_ANALYSIS, enable);
		mainMenu->Enable(ID_MENU_TRACK_GAIN, enable);
		mainMenu->Enable(ID_MENU_ALBUM_GAIN, enable);
		mainMenu->Enable(ID_MENU_MANUAL_GAIN, enable);
		mainMenu->Enable(ID_MENU_CLEAR_FILES, enable);
		mainMenu->Enable(ID_MENU_CLEAR_ALL, enable);
	}
}